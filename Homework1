#problem 1

class Deque:
    def __init__(self, size):
        self.objects = [None] * size
        self.size = size
        self.front = 0
        self.rear = 0

    def isFull(self):
        if (self.front == 0 and self.rear == self.size - 1) or (self.front == self.rear + 1):
            return True
        else:
            return False

    def isEmpty(self):
        if self.front == -1:
            return True
        else:
            return False

    def resize(self, new_size, new_value=0):
        if self.isFull():
            element_size = len(self.size[0])
            new_size = new_size * 2
            while len(self.size) <= new_size:
                n = tuple(new_value for i in range(element_size))
                self.size.append(n)
        else:
            self.size = self[:new_size]
        return self

    def addFirst(self, data, new_size):
        if self.isFull():
            self.resize(new_size)
            print('d')
            return
        elif self.isEmpty():
            self.front = 0
            self.rear = 0
        elif self.front == 0:
            self.front = self.size - 1
        else:
            self.front = self.front - 1
        self.objects[self.front] = data

    def addLast(self, data):
        if self.isFull():
            print("deque is full")
            return
        elif self.isEmpty():
            self.front = 0
            self.rear = 0
        elif self.rear == self.size - 1:
            self.rear = 0
        else:
            self.rear += 1
        self.objects[self.rear] = data

    def removeFirst(self):
        if self.isEmpty():
            print("deque is empty")
            return
        elif self.front == self.rear:
            self.front = -1
            self.rear = -1
        elif self.front == self.size - 1:
            self.front = 0
        else:
            self.front = self.front + 1

    def removeLast(self):
        if self.isEmpty():
            print("deque is empty")
            return
        elif self.front == self.rear:
            self.front = -1
            self.rear = -1
        elif self.rear == 0:
            self.rear = self.size - 1
        else:
            self.rear = self.rear - 1

    def first(self):
        if self.isEmpty():
            print("deque is empty")
            return
        else:
            return self.objects[self.front]

    def last(self):
        if self.isEmpty():
            print("deque is empty")
            return
        else:
            return self.objects[self.rear]

    def display(self):
        current = self.front
        if self.front is None:
            print("The list is empty")
            return
        print("Your Linked List: ")
        while current is not None:
            current = str(current).next
        return self.objects


if __name__ == "__main__":
    deq = Deque(10)
    deq.addFirst(7, new_size=0)
    deq.removeLast()
    deq.removeFirst()
    deq.display()

    print(deq.first())
    print(deq.last())


#problem 3

class Node:
    def __init__(self, data=None, prev=None, next=None, size = 0):
        self.data = data
        self.prev = prev
        self.next = next
        self.size = size

    def __repr__(self):
        return repr(self.data)


class DoubleLinkedList(Node):
    def __init__(self):
        super().__init__()
        self.data = None
        self.next = None
        self.head = None

    def __repr__(self):
        nodes = []
        curr = self.head
        while curr:
            nodes.append(repr(curr))
            curr = curr.next
        return str(nodes)

    def add_to_head(self, data, temp_node):
        new_head = temp_node(data=data, next=self.head)
        if self.head:
            self.head.prev = new_head
        self.head = new_head

    def add_to_end(self, data, temp_node):
        if not self.head:
            self.head = temp_node(data=data)
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = temp_node(data=data, prev=curr)

    def remove_from_head(self, node):
        if node.prev:
            node.prev.next = node.next
        if node.next:
            node.next.prev = node.prev
        if node is self.head:
            self.head = node.next
        node.prev = None
        node.next = None

    def remove_from_end(self, temp_node):
        value = self.head
        while value.next:
            value = value.next
        value.prev.next = None
        if self.next is None:
            temp_node.head = None
            temp_node.prev = self.data

    def get_head(self):
        return self.head

    def get_end(self):
        return self.data[self.size - 1]
        
#problem 2

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.previous = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def addNode(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = self.tail = new_node
            self.head.previous = None
            self.tail.next = None
        else:
            self.tail.next = new_node
            new_node.previous = self.tail
            self.tail = new_node
            self.tail.next = None

    def addFirst(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        if self.head is not None:
            self.head.prev = new_node
        self.head = new_node

    def addLast(self, new_data):
        new_node = Node(new_data)
        new_node.previous = self.tail
        if self.tail is not None:
            self.tail.next = new_node
        self.tail = new_node

    def removeFirst(self):
        if self.head is None:
            print('There is nothing to remove')
            return
        else:
            removed = self.head.data
            self.head = self.head.next
            if self.head is None:
                self.tail = None
            else:
                self.head.prev = None
            return removed

    def removeLast(self):
        if self.tail is None:
            print('There is nothing to remove')
            return
        else:
            removed = self.tail.data
            self.tail = self.tail.previous
            if self.tail is None:
                self.tail = None
            else:
                self.tail.next = None
            return removed

    def first(self):
        print('the first element is:  ')
        print(self.head.data)

    def last(self):
        print('the last element is:  ')
        print(self.tail.data)

    def display(self):
        current = self.head
        if self.head is None:
            print("The list is empty");
            return
        print("Your Deque on Linked List: ");
        while current is not None:
            print(current.data)
            current = current.next

ddl = DoublyLinkedList()
ddl.addNode(data=4)
ddl.addNode(data=9)
ddl.addFirst(5)
ddl.addFirst(3)
ddl.addLast(2)
#ddl.removeFirst()
#ddl.removeLast()
ddl.first()
ddl.last()
ddl.display()
